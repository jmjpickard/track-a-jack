// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String     @id @default(cuid())
    name               String?
    email              String?    @unique
    emailVerified      DateTime?
    image              String?
    password           String?
    username           String?    @unique
    leaderBoardConsent Boolean    @default(false)
    accounts           Account[]
    sessions           Session[]
    posts              Post[]
    Exercise           Exercise[]

    // Friendship relationships
    sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
    receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")

    // Friends - self-referential many-to-many relationship
    friendsOf Friendship[] @relation("UserFriends")
    friends   Friendship[] @relation("FriendsOfUser")

    // Feed posts
    activityPosts ActivityPost[]

    // Streak information
    streak       Streak?
    Notification Notification[]

    // Challenge relationships
    createdChallenges       Challenge[]            @relation("CreatedChallenges")
    challengeParticipations ChallengeParticipant[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum EXERCISE_TYPE {
    RUNNING
    PUSH_UPS
    SIT_UPS
}

model Exercise {
    id        Int           @id @default(autoincrement())
    type      EXERCISE_TYPE
    amount    Int
    unit      String?
    week      Int
    year      Int
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    // Relation to activity post
    activityPost   ActivityPost? @relation(fields: [activityPostId], references: [id])
    activityPostId Int?
}

// Model for friend requests
model FriendRequest {
    id        String   @id @default(cuid())
    status    String   @default("pending") // pending, accepted, rejected
    createdAt DateTime @default(now())

    // Who sent the request
    senderId String
    sender   User   @relation("SentFriendRequests", fields: [senderId], references: [id])

    // Who received the request
    receiverId String
    receiver   User   @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])

    @@unique([senderId, receiverId])
}

// Model for confirmed friendships
model Friendship {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    // Two-way relationship
    userId String
    user   User   @relation("UserFriends", fields: [userId], references: [id])

    friendId String
    friend   User   @relation("FriendsOfUser", fields: [friendId], references: [id])

    @@unique([userId, friendId])
}

// Model for activity posts in the feed
model ActivityPost {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Group identifier (exercises posted within 3 hours are grouped)
    groupTime DateTime

    // User who created the post
    userId String
    user   User   @relation(fields: [userId], references: [id])

    // Exercises in this activity post
    exercises Exercise[]
}

// Model for tracking user activity streaks
model Streak {
    id               String   @id @default(cuid())
    currentStreak    Int      @default(0)
    longestStreak    Int      @default(0)
    lastActivityDate DateTime @default(now())
    streakStartDate  DateTime @default(now())
    isFrozen         Boolean  @default(false)
    freezesAvailable Int      @default(0)

    // User who owns this streak
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Model for user notifications
model Notification {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    type      String // e.g., STREAK_REMINDER, STREAK_MILESTONE_AT_RISK, etc.
    title     String
    content   String
    isRead    Boolean  @default(false)

    // User who receives this notification
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Model for challenge competitions
model Challenge {
    id               String        @id @default(cuid())
    name             String
    description      String?
    type             EXERCISE_TYPE
    goalAmount       Int
    startDate        DateTime
    endDate          DateTime
    isPublic         Boolean       @default(false)
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt
    winnersAnnounced Boolean       @default(false)

    // Challenge creator
    creatorId String
    creator   User   @relation("CreatedChallenges", fields: [creatorId], references: [id])

    // Challenge participants
    participants ChallengeParticipant[]
}

// Model for challenge participants
model ChallengeParticipant {
    id              String   @id @default(cuid())
    joinedAt        DateTime @default(now())
    currentProgress Int      @default(0)
    lastUpdated     DateTime @default(now())

    // Challenge reference
    challengeId String
    challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

    // User reference
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([challengeId, userId])
}
